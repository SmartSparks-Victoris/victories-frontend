import './globals.css';

import AdminNavbar from '@/app/_components/navigation/admin-navbar';
import Footer from '@/app/_components/navigation/footer';
import GuestNavbar from '@/app/_components/navigation/guest-navbar';
import type { Metadata } from 'next';
import NextTopLoader from 'nextjs-toploader';
import SearchBar from '../_components/navigation/searchbar';
import SocketComponent from '@/app/_components/socket-component';
import { SocketProvider } from '@/app/_contexts/socket-context';
import { Toaster } from 'react-hot-toast';
import { cookies } from 'next/headers';
import localFont from 'next/font/local';
import { parseJwt } from '@/app/_utils/auth';

const geistSans = localFont({
  src: '../_fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
});
const geistMono = localFont({
  src: '../_fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // const headersList = headers();
  // const host = headersList.get('host');
  // console.log('HOST: ', host);
  const user = parseJwt(cookies().get('token')?.value);

  // if (host !== 'localhost:3000' && !user) {
  //   return redirect('http://localhost:3000');
  // }

  // if (host === 'localhost:3000' && user) {
  //   // return redirect(`${user.subdomain}.localhost:3000`);
  //   return redirect('home.localhost:3000');
  // }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased ${
          !user && 'pt-[var(--guestNav)]'
        } ${
          user &&
          'pl-[var(--adminNavSmall)] md:pl-[var(--adminNav)] pt-[var(--searchNav)]'
        }`}>
        <Toaster position="top-center" />
        <NextTopLoader />
        <SocketProvider>
          {!user && <GuestNavbar />}
          {user && (
            <>
              <AdminNavbar />
              <SearchBar />
            </>
          )}
          {children}
          {!user && <Footer />}
          <SocketComponent user={user} />
        </SocketProvider>
      </body>
    </html>
  );
}

